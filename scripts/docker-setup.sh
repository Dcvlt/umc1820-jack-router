#!/bin/bash
# scripts/docker-setup.sh
# Complete Docker setup script for JACK Audio Router

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
DOCKER_ENV_FILE="$PROJECT_DIR/docker.env"

echo -e "${BLUE}🎵 JACK Audio Router Docker Setup${NC}"
echo -e "${BLUE}=================================${NC}"
echo -e "Project Directory: ${CYAN}$PROJECT_DIR${NC}"
echo ""

# Function to check prerequisites
check_prerequisites() {
    echo -e "${CYAN}🔍 Checking prerequisites...${NC}"
    
    local prerequisites_ok=true
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}❌ Docker is not installed${NC}"
        echo -e "${YELLOW}Please install Docker Desktop: https://www.docker.com/products/docker-desktop${NC}"
        prerequisites_ok=false
    else
        echo -e "${GREEN}✅ Docker found: $(docker --version | head -n1)${NC}"
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}❌ Docker Compose is not installed${NC}"
        echo -e "${YELLOW}Please install Docker Compose${NC}"
        prerequisites_ok=false
    else
        echo -e "${GREEN}✅ Docker Compose found: $(docker-compose --version)${NC}"
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        echo -e "${RED}❌ Docker daemon is not running${NC}"
        echo -e "${YELLOW}Please start Docker Desktop${NC}"
        prerequisites_ok=false
    else
        echo -e "${GREEN}✅ Docker daemon is running${NC}"
    fi
    
    # Check available disk space (require at least 2GB free)
    local available_space=$(df "$PROJECT_DIR" | awk 'NR==2 {print $4}')
    local required_space=$((2 * 1024 * 1024)) # 2GB in KB
    
    if [[ $available_space -lt $required_space ]]; then
        echo -e "${RED}❌ Insufficient disk space. Required: 2GB, Available: $((available_space / 1024 / 1024))GB${NC}"
        prerequisites_ok=false
    else
        echo -e "${GREEN}✅ Sufficient disk space available${NC}"
    fi
    
    if [[ "$prerequisites_ok" != "true" ]]; then
        echo -e "${RED}❌ Prerequisites check failed. Please fix the issues above.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ All prerequisites satisfied${NC}"
}

# Function to create required directories
create_directories() {
    echo -e "\n${CYAN}📁 Creating required directories...${NC}"
    
    local dirs=(
        "jack-bridge"
        "mosquitto/config"
        "logs"
        "ssl"
        "state"
        "scripts"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$PROJECT_DIR/$dir" ]]; then
            mkdir -p "$PROJECT_DIR/$dir"
            echo -e "${GREEN}✅ Created $dir${NC}"
        else
            echo -e "${CYAN}ℹ️ Directory $dir already exists${NC}"
        fi
    done
}

# Function to setup environment file
setup_environment() {
    echo -e "\n${CYAN}🔧 Setting up environment configuration...${NC}"
    
    if [[ ! -f "$DOCKER_ENV_FILE" ]]; then
        echo -e "${YELLOW}📝 Creating docker.env from example...${NC}"
        
        # Create docker.env with sensible defaults
        cat > "$DOCKER_ENV_FILE" << 'EOF'
# JACK Audio Router Docker Environment Configuration
# Generated by setup script

# Deployment mode
DEPLOYMENT_MODE=docker

# Server configuration
NODE_ENV=production
PORT=3001
HTTPS_PORT=3443
HOST=0.0.0.0
FORCE_HTTPS=true

# SSL Configuration (REQUIRED for Home Assistant)
SSL_ENABLED=true
SSL_AUTO_GENERATE=true

# JACK Bridge configuration
JACK_BRIDGE_HOST=jack-bridge
JACK_BRIDGE_PORT=6666
JACK_BRIDGE_WS_PORT=6667
JACK_SERVER_HOST=host.docker.internal
JACK_TOOLS_PATH=C:/PROGRA~1/JACK2/tools

# MQTT Configuration
MQTT_ENABLED=true
MQTT_HOST=mqtt://mosquitto:1883
MQTT_CLIENT_ID=jack-audio-router-docker

# Home Assistant Integration
HA_INTEGRATION_ENABLED=true
CORS_ORIGINS=https://localhost:3443,https://homeassistant.local:8123
CSP_FRAME_ANCESTORS=https://homeassistant.local:8123

# Logging
LOG_LEVEL=INFO
LOG_COLORS=false
LOG_FILE_ENABLED=true

# Features
FEATURE_SSL_ENABLED=true
FEATURE_MQTT_ENABLED=true
FEATURE_STATE_PERSISTENCE=true
FEATURE_CONNECTION_TRACKING=true
FEATURE_HEALTH_MONITORING=true

# State management
STATE_AUTO_SAVE_INTERVAL=30000
STATE_BACKUP_ENABLED=true
EOF
        
        echo -e "${GREEN}✅ Created docker.env with default settings${NC}"
    else
        echo -e "${GREEN}✅ docker.env already exists${NC}"
    fi
    
    # Prompt for Windows JACK path customization
    echo -e "\n${CYAN}🎛️ Windows JACK Configuration${NC}"
    echo -e "Current JACK tools path: ${YELLOW}$(grep JACK_TOOLS_PATH "$DOCKER_ENV_FILE" | cut -d'=' -f2)${NC}"
    echo -e "Default is usually correct for standard JACK2 installation."
    
    read -p "Do you want to change the JACK tools path? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Enter new JACK tools path: " jack_path
        if [[ -n "$jack_path" ]]; then
            sed -i "s|JACK_TOOLS_PATH=.*|JACK_TOOLS_PATH=$jack_path|" "$DOCKER_ENV_FILE"
            echo -e "${GREEN}✅ Updated JACK tools path${NC}"
        fi
    fi
}

# Function to create required configuration files
setup_configuration_files() {
    echo -e "\n${CYAN}⚙️ Setting up configuration files...${NC}"
    
    # Mosquitto configuration
    local mosquitto_conf="$PROJECT_DIR/mosquitto/config/mosquitto.conf"
    if [[ ! -f "$mosquitto_conf" ]]; then
        cat > "$mosquitto_conf" << 'EOF'
# Mosquitto MQTT Broker Configuration
listener 1883
allow_anonymous true
persistence true
persistence_location /mosquitto/data/
log_dest file /mosquitto/log/mosquitto.log
log_dest stdout
log_type error
log_type warning
log_type notice
log_type information
connection_messages true
log_timestamp true

# WebSocket support
listener 9001
protocol websockets
allow_anonymous true
EOF
        echo -e "${GREEN}✅ Created Mosquitto configuration${NC}"
    else
        echo -e "${CYAN}ℹ️ Mosquitto configuration already exists${NC}"
    fi
    
    # JACK Bridge package.json
    local bridge_package="$PROJECT_DIR/jack-bridge/package.json"
    if [[ ! -f "$bridge_package" ]]; then
        cat > "$bridge_package" << 'EOF'
{
  "name": "jack-bridge-temp",
  "version": "1.0.0",
  "description": "Temporary JACK Bridge Service (Node.js)",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "ws": "^8.14.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
EOF
        echo -e "${GREEN}✅ Created JACK Bridge package.json${NC}"
    else
        echo -e "${CYAN}ℹ️ JACK Bridge package.json already exists${NC}"
    fi
}

# Function to check required files
check_required_files() {
    echo -e "\n${CYAN}📋 Checking required files...${NC}"
    
    local required_files=(
        "package.json"
        "server.js"
        "docker-compose.yml"
        "Dockerfile"
        "jack-bridge/app.js"
        "jack-bridge/package.json"
        "jack-bridge/Dockerfile"
        "mosquitto/config/mosquitto.conf"
    )
    
    local missing_files=()
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$PROJECT_DIR/$file" ]]; then
            missing_files+=("$file")
            echo -e "${RED}❌ Missing: $file${NC}"
        else
            echo -e "${GREEN}✅ Found: $file${NC}"
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        echo -e "\n${RED}❌ Missing required files. Please create these files first:${NC}"
        for file in "${missing_files[@]}"; do
            echo -e "   ${YELLOW}- $file${NC}"
        done
        echo -e "\n${YELLOW}These files should have been provided in the implementation guide.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ All required files are present${NC}"
    return 0
}

# Function to build Docker images
build_images() {
    echo -e "\n${CYAN}🔨 Building Docker images...${NC}"
    echo -e "${YELLOW}This may take several minutes on first run...${NC}"
    
    cd "$PROJECT_DIR"
    
    # Build with progress output
    if docker-compose build --progress=plain; then
        echo -e "${GREEN}✅ Docker images built successfully${NC}"
    else
        echo -e "${RED}❌ Failed to build Docker images${NC}"
        echo -e "${YELLOW}Check the output above for error details${NC}"
        return 1
    fi
}

# Function to start services
start_services() {
    echo -e "\n${CYAN}🚀 Starting services...${NC}"
    
    cd "$PROJECT_DIR"
    
    if docker-compose up -d; then
        echo -e "${GREEN}✅ Services started successfully${NC}"
        
        echo -e "\n${YELLOW}⏳ Waiting for services to initialize...${NC}"
        
        # Wait for services with progress indication
        local max_wait=60
        local wait_time=0
        local services_ready=false
        
        while [[ $wait_time -lt $max_wait ]]; do
            sleep 2
            wait_time=$((wait_time + 2))
            
            # Check if key services are responding
            local bridge_ok=false
            local router_ok=false
            
            if curl -s -f http://localhost:6666/health >/dev/null 2>&1; then
                bridge_ok=true
            fi
            
            if curl -s -f http://localhost:3001/health >/dev/null 2>&1; then
                router_ok=true
            fi
            
            if [[ "$bridge_ok" == "true" && "$router_ok" == "true" ]]; then
                services_ready=true
                break
            fi
            
            echo -e "${CYAN}   Waiting... (${wait_time}s/${max_wait}s)${NC}"
        done
        
        if [[ "$services_ready" == "true" ]]; then
            echo -e "${GREEN}✅ All services are ready!${NC}"
        else
            echo -e "${YELLOW}⚠️ Some services may still be starting up${NC}"
        fi
        
    else
        echo -e "${RED}❌ Failed to start services${NC}"
        echo -e "${YELLOW}Check logs with: docker-compose logs${NC}"
        return 1
    fi
}

# Function to perform health checks
health_check() {
    echo -e "\n${CYAN}🏥 Performing health checks...${NC}"
    
    local checks=(
        "http://localhost:6666/health:JACK Bridge"
        "http://localhost:3001/health:JACK Router"
        "http://localhost:1883:MQTT Broker"
    )
    
    local all_healthy=true
    
    for check in "${checks[@]}"; do
        local url="${check%:*}"
        local service="${check#*:}"
        
        if [[ "$service" == "MQTT Broker" ]]; then
            # MQTT check is different (just check if port is open)
            if nc -z localhost 1883 >/dev/null 2>&1; then
                echo -e "${GREEN}✅ $service is healthy${NC}"
            else
                echo -e "${RED}❌ $service is not healthy${NC}"
                all_healthy=false
            fi
        else
            if curl -s -f "$url" >/dev/null 2>&1; then
                echo -e "${GREEN}✅ $service is healthy${NC}"
            else
                echo -e "${RED}❌ $service is not healthy${NC}"
                all_healthy=false
            fi
        fi
    done
    
    return $([[ "$all_healthy" == "true" ]])
}

# Function to display access information
show_access_info() {
    echo -e "\n${GREEN}🎉 Setup Complete!${NC}"
    echo -e "${GREEN}==================${NC}"
    echo -e ""
    echo -e "${BLUE}🌐 Web Interfaces:${NC}"
    echo -e "   ${CYAN}Main Interface (HTTPS): https://localhost:3443${NC}"
    echo -e "   ${CYAN}Main Interface (HTTP):  http://localhost:3001${NC}"
    echo -e ""
    echo -e "${BLUE}📡 API Endpoints:${NC}"
    echo -e "   ${CYAN}JACK Bridge API:  http://localhost:6666${NC}"
    echo -e "   ${CYAN}Router API:       https://localhost:3443/api${NC}"
    echo -e ""
    echo -e "${BLUE}🦟 MQTT Broker:${NC}"
    echo -e "   ${CYAN}MQTT:             mqtt://localhost:1883${NC}"
    echo -e "   ${CYAN}WebSocket:        ws://localhost:9001${NC}"
    echo -e ""
    echo -e "${BLUE}🏠 Home Assistant Integration:${NC}"
    echo -e "   ${CYAN}Iframe URL:       https://localhost:3443${NC}"
    echo -e "   ${CYAN}MQTT Discovery:   mqtt://localhost:1883${NC}"
    echo -e ""
    echo -e "${BLUE}📋 Useful Commands:${NC}"
    echo -e "   ${CYAN}View logs:        docker-compose logs -f${NC}"
    echo -e "   ${CYAN}Stop services:    docker-compose down${NC}"
    echo -e "   ${CYAN}Restart:          docker-compose restart${NC}"
    echo -e "   ${CYAN}Status:           docker-compose ps${NC}"
    echo -e ""
    echo -e "${YELLOW}⚠️ Important Notes:${NC}"
    echo -e "   • Visit https://localhost:3443 and accept the SSL certificate"
    echo -e "   • For Home Assistant: Add the iframe URL to your dashboard"
    echo -e "   • Make sure JACK is running on your Windows host"
    echo -e ""
}

# Function to show troubleshooting tips
show_troubleshooting() {
    if [[ "$1" != "success" ]]; then
        echo -e "\n${YELLOW}🔧 Troubleshooting Tips:${NC}"
        echo -e ""
        echo -e "${CYAN}If services failed to start:${NC}"
        echo -e "   • Check logs: ${YELLOW}docker-compose logs${NC}"
        echo -e "   • Verify ports are free: ${YELLOW}netstat -an | grep ':3001\\|:6666\\|:1883'${NC}"
        echo -e "   • Restart Docker Desktop if needed"
        echo -e ""
        echo -e "${CYAN}If JACK Bridge can't connect:${NC}"
        echo -e "   • Ensure JACK2 is installed on Windows"
        echo -e "   • Check JACK tools path in docker.env"
        echo -e "   • Verify qjackctl is running"
        echo -e ""
        echo -e "${CYAN}If web interface doesn't load:${NC}"
        echo -e "   • Wait a few more minutes for initialization"
        echo -e "   • Check if port 3443 is available"
        echo -e "   • Try accessing HTTP version: http://localhost:3001"
        echo -e ""
    fi
}

# Main function
main() {
    local setup_success=true
    
    cd "$PROJECT_DIR"
    
    # Run setup steps
    check_prerequisites || setup_success=false
    
    if [[ "$setup_success" == "true" ]]; then
        create_directories || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        setup_environment || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        setup_configuration_files || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        check_required_files || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        build_images || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        start_services || setup_success=false
    fi
    
    if [[ "$setup_success" == "true" ]]; then
        if health_check; then
            show_access_info
            echo