version: '3.8'

services:
  # Windows JACK Bridge Service (Native JACK API)
  jack-bridge-windows:
    build:
      context: ./jack-bridge
      dockerfile: Dockerfile.windows
    platform: windows/amd64
    container_name: jack-bridge-windows
    restart: unless-stopped
    ports:
      - '6666:6666'
    environment:
      - JACK_BRIDGE_API_PORT=6666
      - JACK_SAMPLE_RATE=48000
      - JACK_BUFFER_SIZE=128
      - JACK_DRIVER=wasapi
      - JACK_DEVICE=default
    volumes:
      - jack-bridge-state:/jack-bridge/state
      - jack-bridge-logs:/jack-bridge/logs
      # Mount Windows audio devices (if needed)
      - type: bind
        source: \\.\pipe\
        target: C:\pipe
        read_only: false
    networks:
      - jack-network
    healthcheck:
      test:
        [
          'CMD',
          'powershell',
          '-Command',
          "try { Invoke-WebRequest -Uri 'http://localhost:6666/health' -UseBasicParsing -TimeoutSec 5 | Out-Null; exit 0 } catch { exit 1 }",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s # Give JACK plenty of time to initialize
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # MQTT Broker (Linux container)
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - '1883:1883'
      - '9001:9001'
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    networks:
      - jack-network
    healthcheck:
      test:
        [
          'CMD',
          'mosquitto_pub',
          '-h',
          'localhost',
          '-t',
          'test',
          '-m',
          'test',
          '--quiet',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # JACK Audio Router (Linux container)
  jack-router:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jack-router
    restart: unless-stopped
    ports:
      - '5555:5555' # HTTP port
      - '5556:5556' # HTTPS port
    volumes:
      - router-state:/app/state
      - router-ssl:/app/ssl
      - router-logs:/app/logs
    environment:
      # Server configuration
      - NODE_ENV=production
      - PORT=5555
      - HTTPS_PORT=5556
      - HOST=0.0.0.0
      - DEPLOYMENT_MODE=docker

      # JACK Bridge connection (Windows container)
      - JACK_BRIDGE_HOST=jack-bridge-windows
      - JACK_BRIDGE_PORT=6666
      - JACK_BRIDGE_WS_PORT=6667

      # MQTT configuration
      - MQTT_ENABLED=true
      - MQTT_HOST=mqtt://mosquitto:1883
      - MQTT_CLIENT_ID=jack-audio-router-windows

      # SSL Configuration (REQUIRED for Home Assistant)
      - SSL_ENABLED=true
      - SSL_AUTO_GENERATE=true
      - FORCE_HTTPS=true

      # Home Assistant Integration
      - HA_INTEGRATION_ENABLED=true
      - CORS_ORIGINS=https://localhost:5556,https://homeassistant.local:8123
      - CSP_FRAME_ANCESTORS=https://homeassistant.local:8123

      # Logging
      - LOG_LEVEL=INFO
      - LOG_COLORS=false
      - LOG_FILE_ENABLED=true
      - LOG_FILE_PATH=/app/logs/jack-router.log

      # Features
      - FEATURE_SSL_ENABLED=true
      - FEATURE_MQTT_ENABLED=true
      - FEATURE_STATE_PERSISTENCE=true
      - FEATURE_CONNECTION_TRACKING=true
      - FEATURE_HEALTH_MONITORING=true

      # State management
      - STATE_AUTO_SAVE_INTERVAL=30000
      - STATE_BACKUP_ENABLED=true
    depends_on:
      jack-bridge-windows:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    networks:
      - jack-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5555/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis (Optional - for caching)
  redis:
    profiles: ['cache']
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - jack-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  jack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Windows container volumes
  jack-bridge-state:
    driver: local
  jack-bridge-logs:
    driver: local

  # Linux container volumes
  router-state:
    driver: local
  router-ssl:
    driver: local
  router-logs:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  redis-data:
    driver: local
