# docker-compose.prod.yml
# Production configuration for JACK Audio Router

version: '3.8'

services:
  # JACK Bridge Service (C++ service for Windows JACK communication)
  jack-bridge:
    build:
      context: ./jack-bridge
      dockerfile: Dockerfile
      target: runtime
    container_name: jack-bridge-prod
    restart: always
    ports:
      - '6666:6666'
      - '6667:6667'
    volumes:
      - jack-state-prod:/app/state
      - jack-logs-prod:/app/logs
      - ./jack-bridge/config/production.json:/app/config/config.json:ro
    environment:
      - LOG_LEVEL=INFO
      - JACK_SERVER_HOST=host.docker.internal
      - JACK_TOOLS_PATH=C:/PROGRA~1/JACK2/tools
      - CONFIG_FILE=/app/config/config.json
    networks:
      - jack-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6666/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto-prod
    restart: always
    ports:
      - '1883:1883'
      - '9001:9001'
    volumes:
      - ./mosquitto/production.conf:/mosquitto/config/mosquitto.conf:ro
      - mosquitto-data-prod:/mosquitto/data
      - mosquitto-logs-prod:/mosquitto/log
    networks:
      - jack-network-prod
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test:
        [
          'CMD',
          'mosquitto_pub',
          '-h',
          'localhost',
          '-t',
          'test',
          '-m',
          'test',
          '--quiet',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '2'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis-data-prod:/data
      - ./redis/production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - jack-network-prod
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '2'

  # JACK Audio Router (Node.js application)
  jack-router:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jack-router-prod
    restart: always
    ports:
      - '3001:3001'
      - '3443:3443'
    volumes:
      - router-state-prod:/app/state
      - router-ssl-prod:/app/ssl
      - router-logs-prod:/app/logs
      - ./config/production.js:/app/config/production.js:ro
    environment:
      # Server configuration
      - NODE_ENV=production
      - PORT=3001
      - HTTPS_PORT=3443
      - HOST=0.0.0.0

      # JACK Bridge connection
      - JACK_BRIDGE_HOST=jack-bridge
      - JACK_BRIDGE_PORT=6666
      - JACK_BRIDGE_WS_PORT=6667

      # Redis connection
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # MQTT configuration
      - MQTT_ENABLED=true
      - MQTT_HOST=mqtt://mosquitto:1883
      - MQTT_CLIENT_ID=jack-audio-router-prod

      # Security and performance
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_MAX_REQUESTS=1000
      - RATE_LIMIT_WINDOW_MS=900000

      # SSL
      - SSL_AUTO_GENERATE=false
      - FORCE_HTTPS=true

      # Logging
      - LOG_LEVEL=INFO
      - LOG_COLORS=false
      - LOG_FILE_ENABLED=true
      - LOG_FILE_PATH=/app/logs/jack-router.log

      # Features
      - FEATURE_SSL_ENABLED=true
      - FEATURE_MQTT_ENABLED=true
      - FEATURE_STATE_PERSISTENCE=true
      - FEATURE_CONNECTION_TRACKING=true
      - FEATURE_HEALTH_MONITORING=true

      # State management
      - STATE_AUTO_SAVE_INTERVAL=30000
      - STATE_BACKUP_ENABLED=true

      # Monitoring
      - HEALTH_CHECK_INTERVAL=30
      - MONITORING_ENABLED=true
      - METRICS_ENABLED=true
    depends_on:
      jack-bridge:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jack-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '20m'
        max-file: '5'

  # Nginx reverse proxy (optional, for production load balancing)
  nginx:
    profiles: ['proxy']
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs-prod:/var/log/nginx
    depends_on:
      - jack-router
    networks:
      - jack-network-prod
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Log aggregator (optional)
  logspout:
    profiles: ['logging']
    image: gliderlabs/logspout:latest
    container_name: logspout
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ROUTE_URIS=syslog+tcp://logs.example.com:514
    networks:
      - jack-network-prod
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Monitoring with Prometheus (optional)
  prometheus:
    profiles: ['monitoring']
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data-prod:/prometheus
    networks:
      - jack-network-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Grafana for monitoring dashboard (optional)
  grafana:
    profiles: ['monitoring']
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - '3000:3000'
    volumes:
      - grafana-data-prod:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - jack-network-prod
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

networks:
  jack-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: jack-prod-br

volumes:
  # Production data volumes
  jack-state-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/data/jack-state

  router-state-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/data/router-state

  router-ssl-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/ssl

  # Log volumes
  router-logs-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/logs/router

  jack-logs-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/logs/bridge

  nginx-logs-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/jack-audio-router/logs/nginx

  # Service data volumes
  mosquitto-data-prod:
    driver: local
  mosquitto-logs-prod:
    driver: local
  redis-data-prod:
    driver: local
  prometheus-data-prod:
    driver: local
  grafana-data-prod:
    driver: local
